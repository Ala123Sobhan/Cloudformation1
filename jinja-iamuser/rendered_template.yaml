Resources:

  RandomStringCustomResource0:
    Type: "Custom::RandomString"
    Properties:
      length: 25
      ServiceToken: !ImportValue RandomizerLambdaArnB2301

  RandomStringCustomResource1:
    Type: "Custom::RandomString"
    Properties:
      length: 25
      ServiceToken: !ImportValue RandomizerLambdaArnB2301

  RandomStringCustomResource2:
    Type: "Custom::RandomString"
    Properties:
      length: 25
      ServiceToken: !ImportValue RandomizerLambdaArnB2301
 


  ConsoleSignInLinkCustomResource0:
    Type: "Custom::SignInLink"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      Arn: !GetAtt Studentalaina1.Arn

  ConsoleSignInLinkCustomResource1:
    Type: "Custom::SignInLink"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      Arn: !GetAtt Studentalaina2.Arn

  ConsoleSignInLinkCustomResource2:
    Type: "Custom::SignInLink"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      Arn: !GetAtt Studentalaina3.Arn
 

  StudentsReadOnlyGroup101:
    Type: AWS::IAM::Group
    Properties:
      GroupName: StudentsReadOnlyGroup101
#      Policies:
#        - Policy

  StudentsReadOnlyPolicy101:
    Type: AWS::IAM::Policy
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup101
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      PolicyName: StudentsReadOnlyPolicy101



  Studentalaina1:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup101
      LoginProfile:
        Password: !GetAtt RandomStringCustomResource0.RandomString
        PasswordResetRequired: true
      UserName: Studentalaina1

  Studentalaina2:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup101
      LoginProfile:
        Password: !GetAtt RandomStringCustomResource1.RandomString
        PasswordResetRequired: true
      UserName: Studentalaina2

  Studentalaina3:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup101
      LoginProfile:
        Password: !GetAtt RandomStringCustomResource2.RandomString
        PasswordResetRequired: true
      UserName: Studentalaina3
  

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaFunctionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import re
          import cfnresponse
          def handler(event, context):
              response_data = {}
              try:
                  arn = event["ResourceProperties"]["Arn"]
                  account_id = arn.split(":")[4]
                  sign_in_link = f"https://{account_id}.signin.aws.amazon.com/console/"
                  response_data['SignInLink'] = sign_in_link
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
              except Exception as e:
                   error_message = str(e)
                   print("Exception Error : " +error_message )
                   cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")
      Timeout: 60
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess

  SendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendEmailFunction
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def send_email(recipient_email, subject, body, link):
              ses_client = boto3.client('ses', region_name='us-west-2')
              response = ses_client.send_email(
                  Source='ala123sobhan@gmail.com',
                  Destination={
                      'ToAddresses': [recipient_email]
                  },
                  Message={
                      'Subject': {'Data': subject},
                      'Body': {
                          'Text': {
                              'Data': f"{body}\n\nConsole Sign-in Link: {link}"
                          }
                      }
                  }
              )
              return response

          def lambda_handler(event, context):
              response_data = {}
              try:
                  recipient_email = event['ResourceProperties']['RecipientEmail']
                  subject = event['ResourceProperties']['Subject']
                  body = event['ResourceProperties']['Body']
                  link = event['ResourceProperties']['ConsoleLink']

                  send_email(recipient_email, subject, body,link)

                  response_data['Status'] = 'SUCCESS'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  response_data['Status'] = 'FAILED'
                  response_data['Error'] = str(e)
                  print("Exception Error : " +str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)


  EmailCustomResource:
    Type: Custom::SendEmail
    Properties:
      ServiceToken: !GetAtt SendEmailFunction.Arn
      RecipientEmail: alasobhan.work+alaina1@gmail.com
      Subject: Hello from AWS SES
      Body: |
        Hello alaina1, 
        This is a test email from AWS SES.
      ConsoleLink: !GetAtt ConsoleSignInLinkCustomResource0.SignInLink

  EmailCustomResource:
    Type: Custom::SendEmail
    Properties:
      ServiceToken: !GetAtt SendEmailFunction.Arn
      RecipientEmail: alasobhan.work+alaina2@gmail.com
      Subject: Hello from AWS SES
      Body: |
        Hello alaina2, 
        This is a test email from AWS SES.
      ConsoleLink: !GetAtt ConsoleSignInLinkCustomResource1.SignInLink

  EmailCustomResource:
    Type: Custom::SendEmail
    Properties:
      ServiceToken: !GetAtt SendEmailFunction.Arn
      RecipientEmail: alasobhan.work+alaina3@gmail.com
      Subject: Hello from AWS SES
      Body: |
        Hello alaina3, 
        This is a test email from AWS SES.
      ConsoleLink: !GetAtt ConsoleSignInLinkCustomResource2.SignInLink
 

Outputs:

  RandomString0:
    Description: RandomString Value
    Value: !GetAtt RandomStringCustomResource0.RandomString
  ConsoleSignInLinkCustomResource0:
    Value: !GetAtt ConsoleSignInLinkCustomResource0.SignInLink
    
  

  RandomString1:
    Description: RandomString Value
    Value: !GetAtt RandomStringCustomResource1.RandomString
  ConsoleSignInLinkCustomResource1:
    Value: !GetAtt ConsoleSignInLinkCustomResource1.SignInLink
    
  

  RandomString2:
    Description: RandomString Value
    Value: !GetAtt RandomStringCustomResource2.RandomString
  ConsoleSignInLinkCustomResource2:
    Value: !GetAtt ConsoleSignInLinkCustomResource2.SignInLink
    
  
  