Resources:
  GetLinks:
    Type: "Custom::SignInLink"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      Arn: arn:aws:iam::199055471403:user/Studentalaina1

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaFunctionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import re
          import cfnresponse
          def handler(event, context):
              response_data = {}
              try:
                  arn = event["ResourceProperties"]["Arn"]
                  account_id = arn.split(":")[4]
                  sign_in_link = f"https://{account_id}.signin.aws.amazon.com/console/"
                  response_data['SignInLink'] = sign_in_link
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
              except Exception as e:
                   error_message = str(e)
                   print("Exception Error : " +error_message )
                   cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")
      Timeout: 60

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: UserConsoleLinks
  SignInLink:
    Value: !GetAtt GetLinks.SignInLink
