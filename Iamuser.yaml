AWSTemplateFormatVersion: "2010-09-09"

Description: Create IAM Users.

# 1. IAM Uer Group
# 2. IAM Users
# 3. Policies - Attach Policies to the group

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  PasswordLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require('cfn-response');
           exports.handler = function(event, context) {
            try {
              const randomString = generateRandomString();
              response.send(event, context, response.SUCCESS, { RandomString: randomString });
            } catch (error) {
              response.send(event, context, response.FAILED, { Error: error.message });
            }
          };

            function generateRandomString() {
            // Generate a random string here
            // Replace this implementation with your own logic
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            const length = 10;
            for (let i = 0; i < length; i++) {
              result += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            return result;
          }
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 128
      Timeout: 3

  # Custom Resource
  RandomStringForPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 16
      ServiceToken: !GetAtt PasswordLambdaFunction.Arn #cloudformation sends request here

  StudentsReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: StudentsReadOnlyGroup102
  #      Policies:
  #        - Policy

  StudentsReadOnlyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      PolicyName: StudentsReadOnlyPolicy

  StudentBela:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref StudentsReadOnlyGroup
      LoginProfile:
        Password: !GetAtt RandomStringForPassword.RandomString
        PasswordResetRequired: true
      UserName: StudentBela

  # StudentDohn:
  #   Type: AWS::IAM::User
  #   Properties:
  #     Groups:
  #       - !Ref StudentsReadOnlyGroup
  #     LoginProfile:
  #       Password: !GetAtt RandomStringForPassword.RandomString
  #       PasswordResetRequired: true
  #     UserName: StudentDohn

  # StudentMon:
  #   Type: AWS::IAM::User
  #   Properties:
  #     Groups:
  #       - !Ref StudentsReadOnlyGroup
  #     LoginProfile:
  #       Password: !GetAtt RandomStringForPassword.RandomString
  #       PasswordResetRequired: true
  #     UserName: StudentMon

  # Outputs
Outputs:
  PasswordRandomString:
    Value: !GetAtt RandomStringForPassword.RandomString
    Description: "Sample random string generated by lambda function"
# aws cloudformation create-stack --stack-name b2301-manage-iam-users --template-body file://manage-iam-users.yaml.yaml
# aws cloudformation create-stack --stack-name b2301-manage-iam-users --template-body file://manage-iam-users.yaml.yaml

# aws cloudformation create-change-set --stack-name b2301-manage-iam-users --change-set-name first-change-set --change-set-type CREATE --template-body file://manage-iam-users.yaml.yaml

# aws cloudformation validate-template --template-body file://manage-iam-users.yaml
